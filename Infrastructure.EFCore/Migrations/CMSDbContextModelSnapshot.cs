// <auto-generated />
using System;
using Infrastructure.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.EFCore.Migrations
{
    [DbContext(typeof(CMSDbContext))]
    partial class CMSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ApiComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.ToTable("ApiComponents");
                });

            modelBuilder.Entity("Domain.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EncryptedKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Domain.Entities.ApiKeyUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApiComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiComponentId");

                    b.ToTable("ApiKeyUsages");
                });

            modelBuilder.Entity("Domain.Entities.BasicComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApiComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApiComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("BasicComponents");

                    b.HasDiscriminator().HasValue("BasicComponent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Component", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("ZIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Components");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.ButtonBasicComponent", b =>
                {
                    b.HasBaseType("Domain.Entities.BasicComponent");

                    b.Property<string>("ClassInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<int>("FunctionType")
                        .HasColumnType("int");

                    b.Property<string>("IdInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TriggerType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ButtonBasicComponent");
                });

            modelBuilder.Entity("Domain.Entities.TextAreaBasicComponent", b =>
                {
                    b.HasBaseType("Domain.Entities.BasicComponent");

                    b.Property<string>("ClassInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("IdInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCol")
                        .HasColumnType("int");

                    b.Property<int>("MaxRow")
                        .HasColumnType("int");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BasicComponents", t =>
                        {
                            t.Property("ClassInfo")
                                .HasColumnName("TextAreaBasicComponent_ClassInfo");

                            t.Property("Disable")
                                .HasColumnName("TextAreaBasicComponent_Disable");

                            t.Property("IdInfo")
                                .HasColumnName("TextAreaBasicComponent_IdInfo");

                            t.Property("Text")
                                .HasColumnName("TextAreaBasicComponent_Text");
                        });

                    b.HasDiscriminator().HasValue("TextAreaBasicComponent");
                });

            modelBuilder.Entity("Domain.Entities.TextBasicComponent", b =>
                {
                    b.HasBaseType("Domain.Entities.BasicComponent");

                    b.Property<string>("ClassInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disable")
                        .HasColumnType("bit");

                    b.Property<string>("IdInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BasicComponents", t =>
                        {
                            t.Property("ClassInfo")
                                .HasColumnName("TextBasicComponent_ClassInfo");

                            t.Property("Disable")
                                .HasColumnName("TextBasicComponent_Disable");

                            t.Property("IdInfo")
                                .HasColumnName("TextBasicComponent_IdInfo");

                            t.Property("Placeholder")
                                .HasColumnName("TextBasicComponent_Placeholder");

                            t.Property("Text")
                                .HasColumnName("TextBasicComponent_Text");
                        });

                    b.HasDiscriminator().HasValue("TextBasicComponent");
                });

            modelBuilder.Entity("Domain.Entities.ApiComponent", b =>
                {
                    b.HasOne("Domain.Entities.ApiKey", "ApiKey")
                        .WithMany()
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("Domain.Entities.ApiKey", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApiKeyUsage", b =>
                {
                    b.HasOne("Domain.Entities.ApiComponent", null)
                        .WithMany("ApiKeyUsage")
                        .HasForeignKey("ApiComponentId");
                });

            modelBuilder.Entity("Domain.Entities.BasicComponent", b =>
                {
                    b.HasOne("Domain.Entities.ApiComponent", null)
                        .WithMany("BasicComponents")
                        .HasForeignKey("ApiComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Component", null)
                        .WithMany("BasicComponents")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ApiComponent", b =>
                {
                    b.Navigation("ApiKeyUsage");

                    b.Navigation("BasicComponents");
                });

            modelBuilder.Entity("Domain.Entities.Component", b =>
                {
                    b.Navigation("BasicComponents");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("ApiKeys");
                });
#pragma warning restore 612, 618
        }
    }
}
